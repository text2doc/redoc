{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf00 redoc","text":"<p>Multi-Level Solution Architecture Generator</p> <p>redoc is a powerful AI tool that uses Ollama Mistral:7b to generate multi-level solution architectures. Inspired by the movie \"Inception\", it creates nested tasks leading to complete implementations.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83e\udde0 AI-Powered: Integration with Ollama Mistral:7b</li> <li>\ud83c\udfd7\ufe0f Multi-Level: 3-5 levels of architecture (LIMBO \u2192 DREAM \u2192 REALITY \u2192 DEEPER \u2192 DEEPEST)</li> <li>\ud83d\udd0d Context-Aware: Automatic context analysis from a single sentence</li> <li>\ud83d\udcbb Interactive CLI: Rich shell interface</li> <li>\ud83d\udcca Structured Output: JSON/YAML export</li> <li>\ud83d\ude80 Zero-Setup: Works out of the box with local Ollama</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<pre><code># Installation\npip install redoc\n\n# Basic usage\nredoc \"I need a login system with Flask + React\"\n\n# Interactive shell\nredoc shell\n</code></pre> <p>Get Started \u2192 <pre><code>## \ud83d\udce6 Installation\n\n### System Requirements\n\n- Python 3.8+\n- Ollama with Mistral:7b model\n- 4GB RAM (minimum)\n- Internet connection (for model download)\n\n### Installing Ollama\n\n### macOS/Linux\n```bash\ncurl -fsSL https://ollama.ai/install.sh | sh\nollama pull mistral:7b\n</code></pre></p>"},{"location":"#windows","title":"Windows","text":"<p>Pobierz installer i uruchom: <pre><code>ollama pull mistral:7b\n</code></pre></p>"},{"location":"#instalacja-redoc","title":"Instalacja redoc","text":""},{"location":"#przez-pip-recommended","title":"Przez pip (Recommended)","text":"<pre><code>pip install redoc\n</code></pre>"},{"location":"#z-zroda","title":"Z \u017ar\u00f3d\u0142a","text":"<pre><code>git clone https://github.com/yourusername/redoc.git\ncd redoc\npip install -e .\n</code></pre>"},{"location":"#development-setup","title":"Development setup","text":"<pre><code>git clone https://github.com/yourusername/redoc.git\ncd redoc\npip install -e \".[dev]\"\n</code></pre>"},{"location":"#weryfikacja-instalacji","title":"Weryfikacja instalacji","text":"<p><pre><code># Sprawd\u017a Ollama\nollama list\n\n# Sprawd\u017a redoc\nredoc --version\nredoc status\n</code></pre> <pre><code>### docs/guide/basic-usage.md\n```markdown\n# \ud83d\udcd6 Basic Usage\n\n## Pierwsze kroki\n\n### 1. Generowanie prostej architektury\n\n```bash\nredoc \"system logowania dla aplikacji web\"\n</code></pre></p>"},{"location":"#2-ustawienie-liczby-poziomow","title":"2. Ustawienie liczby poziom\u00f3w","text":"<pre><code>redoc \"CI/CD pipeline\" --levels 4\n</code></pre>"},{"location":"#3-interaktywny-shell","title":"3. Interaktywny shell","text":"<pre><code>redoc shell\n</code></pre> <p>W shell mo\u017cna u\u017cywa\u0107:</p> <pre><code>dream&gt; dream \"monitoring system dla microservices\"\ndream&gt; show\ndream&gt; save my_monitoring_system\ndream&gt; export json\n</code></pre>"},{"location":"#przykady-komend","title":"Przyk\u0142ady komend","text":""},{"location":"#analiza-kontekstu","title":"Analiza kontekstu","text":"<pre><code>dream&gt; context \"urgent Python security audit dla GDPR compliance\"\n</code></pre>"},{"location":"#rozne-formaty-output","title":"R\u00f3\u017cne formaty output","text":"<pre><code># JSON output\nredoc \"problem\" --output json\n\n# YAML output  \nredoc \"problem\" --output yaml\n\n# Rich summary (default)\nredoc \"problem\" --output summary\n</code></pre>"},{"location":"#praca-z-workspace","title":"Praca z workspace","text":"<p><pre><code>dream&gt; workspace        # Otwiera folder\ndream&gt; history          # Historia komend\ndream&gt; config           # Konfiguracja\n</code></pre> <pre><code>## \ud83d\ude80 Uruchomienie dokumentacji:\n\n```bash\n# Instalacja MkDocs\npip install mkdocs-material mkdocstrings[python] mkdocs-awesome-pages-plugin\n\n# Development server\nmkdocs serve\n\n# Build static site\nmkdocs build\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy\n</code></pre></p>"},{"location":"#customizacja","title":"\ud83c\udfa8 Customizacja:","text":""},{"location":"#custom-css-docsassetscsscustomcss","title":"Custom CSS (docs/assets/css/custom.css):","text":"<pre><code>:root {\n  --md-primary-fg-color: #1976d2;\n  --md-accent-fg-color: #00bcd4;\n}\n\n.md-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.inception-logo {\n  animation: rotate 20s linear infinite;\n}\n\n@keyframes rotate {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n</code></pre>"},{"location":"#custom-javascript-docsassetsjscustomjs","title":"Custom JavaScript (docs/assets/js/custom.js):","text":"<pre><code>// Terminal animation for code examples\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Initialize terminal animations\n  const terminals = document.querySelectorAll('.termynal');\n  terminals.forEach(terminal =&gt; {\n    new Termynal(terminal);\n  });\n});\n</code></pre> <p>Nast\u0119pne kroki: 1. Stw\u00f3rz folder <code>docs/</code> i dodaj podstawowe pliki 2. Uruchom <code>mkdocs serve</code>  3. Dostosuj tre\u015b\u0107 do swojego projektu 4. Deploy na GitHub Pages z <code>mkdocs gh-deploy</code></p>"},{"location":"ai/","title":"\ud83e\udd16 AI-Powered Features","text":"<p>Redoc leverages AI to enhance document processing capabilities. This guide covers the AI features and how to use them effectively.</p>"},{"location":"ai/#ai-capabilities","title":"AI Capabilities","text":""},{"location":"ai/#1-smart-document-processing","title":"1. Smart Document Processing","text":"<ul> <li>Content Analysis: Extract key information from documents</li> <li>Document Classification: Automatically categorize documents</li> <li>Entity Recognition: Identify and extract entities (names, dates, amounts, etc.)</li> <li>Sentiment Analysis: Analyze the sentiment of text content</li> </ul>"},{"location":"ai/#2-content-generation","title":"2. Content Generation","text":"<ul> <li>Text Summarization: Generate concise summaries of documents</li> <li>Content Expansion: Expand bullet points into full paragraphs</li> <li>Document Outlining: Create structured outlines from unstructured text</li> <li>Language Translation: Translate content between languages</li> </ul>"},{"location":"ai/#3-data-extraction","title":"3. Data Extraction","text":"<ul> <li>Form Recognition: Extract data from forms and invoices</li> <li>Table Extraction: Convert tables in documents to structured data</li> <li>Key-Value Pair Extraction: Extract structured data from unstructured text</li> </ul>"},{"location":"ai/#getting-started-with-ai-features","title":"Getting Started with AI Features","text":""},{"location":"ai/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Redoc with AI support:    <pre><code>pip install \"redoc[ai]\"\n</code></pre></li> <li>Set up your AI provider (OpenAI, Ollama, etc.)</li> </ol>"},{"location":"ai/#basic-usage","title":"Basic Usage","text":""},{"location":"ai/#text-summarization","title":"Text Summarization","text":"<pre><code>from redoc import Redoc\n\nredoc = Redoc()\nsummary = redoc.ai.summarize(\"long_document.txt\", length=\"brief\")\nprint(summary)\n</code></pre>"},{"location":"ai/#entity-recognition","title":"Entity Recognition","text":"<pre><code>entities = redoc.ai.extract_entities(\"document.pdf\")\nfor entity in entities:\n    print(f\"{entity['text']} - {entity['type']}\")\n</code></pre>"},{"location":"ai/#ai-providers","title":"AI Providers","text":"<p>Redoc supports multiple AI providers:</p>"},{"location":"ai/#1-ollama-local","title":"1. Ollama (Local)","text":"<pre><code>from redoc.ai.providers import OllamaProvider\n\nprovider = OllamaProvider(model=\"mistral:7b\")\nredoc = Redoc(ai_provider=provider)\n</code></pre>"},{"location":"ai/#2-openai","title":"2. OpenAI","text":"<pre><code>from redoc.ai.providers import OpenAIProvider\n\nprovider = OpenAIProvider(api_key=\"your-api-key\", model=\"gpt-4\")\nredoc = Redoc(ai_provider=provider)\n</code></pre>"},{"location":"ai/#3-custom-provider","title":"3. Custom Provider","text":"<p>Implement your own provider by extending the <code>AIProvider</code> class:</p> <pre><code>from redoc.ai.base import AIProvider\n\nclass MyAIProvider(AIProvider):\n    def summarize(self, text: str, **kwargs) -&gt; str:\n        # Your implementation here\n        return summary\n</code></pre>"},{"location":"ai/#advanced-usage","title":"Advanced Usage","text":""},{"location":"ai/#document-qa","title":"Document Q&amp;A","text":"<pre><code>answer = redoc.ai.ask(\"document.pdf\", \"What is the main topic?\")\nprint(answer)\n</code></pre>"},{"location":"ai/#document-comparison","title":"Document Comparison","text":"<pre><code>diff = redoc.ai.compare_documents(\"doc1.pdf\", \"doc2.pdf\")\nprint(diff)\n</code></pre>"},{"location":"ai/#best-practices","title":"Best Practices","text":"<ol> <li>Data Privacy: Be mindful of sensitive information when using cloud-based AI services</li> <li>Cost Management: Monitor API usage to avoid unexpected costs</li> <li>Quality Control: Always review AI-generated content</li> <li>Performance: Cache results when processing multiple documents</li> <li>Fallbacks: Implement fallback behavior for when AI services are unavailable</li> </ol>"},{"location":"ai/#configuration","title":"Configuration","text":"<p>Configure AI settings in <code>~/.config/redoc/config.yaml</code>:</p> <pre><code>ai:\n  provider: ollama  # or 'openai', 'custom'\n  model: mistral:7b\n  temperature: 0.7\n  max_tokens: 1000\n\n  # Ollama specific\n  ollama:\n    base_url: http://localhost:11434\n\n  # OpenAI specific\n  openai:\n    api_key: ${OPENAI_API_KEY}\n    organization: ${OPENAI_ORG}\n</code></pre>"},{"location":"ai/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Missing API Key <pre><code>export OPENAI_API_KEY='your-api-key'\n</code></pre></p> </li> <li> <p>Model Not Found <pre><code># For Ollama\nollama pull mistral:7b\n</code></pre></p> </li> <li> <p>Rate Limiting</p> </li> <li>Implement retry logic</li> <li>Reduce request frequency</li> <li>Check your API quota</li> </ol>"},{"location":"ai/#next-steps","title":"Next Steps","text":"<ul> <li>Explore templates for AI-powered document generation</li> <li>Check the API Reference for advanced usage</li> <li>Join our Community for support</li> </ul>"},{"location":"api/","title":"\ud83d\udcda Redoc API Reference","text":"<p>This document provides a comprehensive reference for the Redoc Python API, command-line interface, and web API.</p>"},{"location":"api/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Classes</li> <li>Document Conversion</li> <li>Templates</li> <li>AI Integration</li> <li>Command Line Interface</li> <li>Web API</li> <li>Configuration</li> <li>Exceptions</li> </ul>"},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#redoc-class","title":"<code>Redoc</code> Class","text":"<p>The main class for interacting with Redoc programmatically.</p> <pre><code>from redoc import Redoc\n\n# Basic initialization\nredoc = Redoc()\n\n# With custom configuration\nredoc = Redoc(\n    templates_dir=\"templates\",\n    cache_dir=\".cache\",\n    debug=False\n)\n</code></pre>"},{"location":"api/#methods","title":"Methods","text":"<ul> <li><code>convert(input_file, output_file, **options)</code> - Convert between document formats</li> <li><code>batch_convert(input_glob, output_dir, **options)</code> - Process multiple files</li> <li><code>extract_data(input_file, schema=None, **options)</code> - Extract data from documents</li> <li><code>generate_document(template, data, output_file, **options)</code> - Generate documents from templates</li> <li><code>validate_document(file_path, schema=None)</code> - Validate document against a schema</li> <li><code>get_available_formats()</code> - List supported input/output formats</li> </ul>"},{"location":"api/#document-conversion","title":"Document Conversion","text":""},{"location":"api/#basic-conversion","title":"Basic Conversion","text":"<pre><code># Convert PDF to HTML\nredoc.convert(\"input.pdf\", \"output.html\")\n\n# Convert with options\nredoc.convert(\n    \"input.pdf\",\n    \"output.html\",\n    dpi=300,\n    page_range=\"1-5,7,9-12\"\n)\n</code></pre>"},{"location":"api/#batch-processing","title":"Batch Processing","text":"<pre><code># Process multiple files\nresults = redoc.batch_convert(\n    \"documents/*.pdf\",\n    \"output/\",\n    output_format=\"html\",\n    recursive=True\n)\n\nfor result in results:\n    print(f\"Processed {result.input} -&gt; {result.output}\")\n</code></pre>"},{"location":"api/#templates","title":"Templates","text":""},{"location":"api/#using-templates","title":"Using Templates","text":"<pre><code># Generate document from template\ndata = {\n    \"title\": \"Sample Document\",\n    \"sections\": [\"Introduction\", \"Main Content\", \"Conclusion\"]\n}\n\nredoc.generate_document(\n    template=\"basic.html\",\n    data=data,\n    output_file=\"output.pdf\"\n)\n</code></pre>"},{"location":"api/#template-helpers","title":"Template Helpers","text":"<pre><code># Register custom filters\n@redoc.template_filter('currency')\ndef format_currency(value):\n    return f\"${value:,.2f}\"\n\n# Add global variables\nredoc.template_globals['version'] = '1.0.0'\nredoc.template_globals['current_year'] = lambda: datetime.now().year\n</code></pre>"},{"location":"api/#ai-integration","title":"AI Integration","text":""},{"location":"api/#basic-ai-operations","title":"Basic AI Operations","text":"<pre><code># Summarize text\nsummary = redoc.ai.summarize(\"long_document.txt\")\n\n# Extract entities\nentities = redoc.ai.extract_entities(\"document.pdf\")\n\n# Answer questions about a document\nanswer = redoc.ai.ask(\"document.pdf\", \"What is the main topic?\")\n</code></pre>"},{"location":"api/#custom-ai-providers","title":"Custom AI Providers","text":"<pre><code>from redoc.ai.base import AIProvider\n\nclass MyAIProvider(AIProvider):\n    def summarize(self, text: str, **kwargs) -&gt; str:\n        # Your implementation here\n        return summary\n\n# Use custom provider\nredoc = Redoc(ai_provider=MyAIProvider())\n</code></pre>"},{"location":"api/#command-line-interface","title":"Command Line Interface","text":""},{"location":"api/#basic-commands","title":"Basic Commands","text":"<pre><code># Convert document\nredoc convert input.pdf output.html\n\n# Batch process files\nredoc batch \"documents/*.pdf\" --format html --output-dir output\n\n# Start interactive shell\nredoc shell\n\n# Start web server\nredoc serve --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"api/#common-options","title":"Common Options","text":"<ul> <li><code>--format, -f</code>: Output format (default: auto-detect)</li> <li><code>--template, -t</code>: Template to use</li> <li><code>--output-dir, -o</code>: Output directory</li> <li><code>--recursive, -r</code>: Process directories recursively</li> <li><code>--workers, -w</code>: Number of worker processes</li> <li><code>--debug</code>: Enable debug mode</li> </ul>"},{"location":"api/#web-api","title":"Web API","text":""},{"location":"api/#endpoints","title":"Endpoints","text":"<ul> <li><code>POST /api/convert</code> - Convert document</li> <li><code>POST /api/batch</code> - Batch process documents</li> <li><code>POST /api/extract</code> - Extract data from document</li> <li><code>GET /api/formats</code> - List supported formats</li> <li><code>GET /api/health</code> - Health check</li> </ul>"},{"location":"api/#example-request","title":"Example Request","text":"<pre><code>curl -X POST http://localhost:8000/api/convert \\\n  -F \"file=@document.pdf\" \\\n  -F \"output_format=html\" \\\n  -o output.html\n</code></pre>"},{"location":"api/#configuration","title":"Configuration","text":""},{"location":"api/#environment-variables","title":"Environment Variables","text":"<pre><code>export REDOC_LOG_LEVEL=INFO\nexport REDOC_WORKERS=4\nexport REDOC_TEMP_DIR=/tmp/redoc\n</code></pre>"},{"location":"api/#configuration-file","title":"Configuration File","text":"<p>Create <code>~/.config/redoc/config.yaml</code>:</p> <pre><code>log_level: INFO\nworkers: 4\ntemp_dir: /tmp/redoc\n\ntemplates:\n  search_paths:\n    - ~/.config/redoc/templates\n    - /usr/local/share/redoc/templates\n\nai:\n  provider: ollama\n  model: mistral:7b\n  temperature: 0.7\n</code></pre>"},{"location":"api/#exceptions","title":"Exceptions","text":""},{"location":"api/#common-exceptions","title":"Common Exceptions","text":"<ul> <li><code>RedocError</code> - Base exception for all Redoc errors</li> <li><code>ConversionError</code> - Document conversion failed</li> <li><code>TemplateError</code> - Template rendering error</li> <li><code>ValidationError</code> - Data validation failed</li> <li><code>UnsupportedFormatError</code> - Unsupported file format</li> <li><code>AIServiceError</code> - AI service error</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    redoc.convert(\"input.pdf\", \"output.html\")\nexcept redoc.RedocError as e:\n    print(f\"Error: {e}\")\n    if hasattr(e, 'details'):\n        print(f\"Details: {e.details}\")\n</code></pre>"},{"location":"api/#examples","title":"Examples","text":""},{"location":"api/#convert-and-process","title":"Convert and Process","text":"<pre><code># Convert and process the result\nwith redoc.convert_to_memory(\"input.pdf\", \"html\") as html_content:\n    # Process HTML content\n    processed = process_html(html_content)\n\n    # Save result\n    with open(\"processed.html\", \"w\") as f:\n        f.write(processed)\n</code></pre>"},{"location":"api/#custom-document-processor","title":"Custom Document Processor","text":"<pre><code>from redoc.processors import DocumentProcessor\n\nclass MyProcessor(DocumentProcessor):\n    def process(self, content, **kwargs):\n        # Process document content\n        return processed_content\n\n# Register processor\nredoc.register_processor(\"my_format\", MyProcessor())\n</code></pre>"},{"location":"api/#contributing","title":"Contributing","text":"<p>For contributing to Redoc, see our Contributing Guide.</p>"},{"location":"features/","title":"\ud83d\ude80 Redoc Features","text":"<p>Redoc is a powerful document conversion framework with a wide range of features for processing documents in various formats. Below is a comprehensive list of features organized by category.</p>"},{"location":"features/#core-conversion-capabilities","title":"\ud83d\udd04 Core Conversion Capabilities","text":""},{"location":"features/#supported-formats","title":"Supported Formats","text":"<ul> <li>Input Formats: PDF, HTML, DOCX, EPUB, TXT, Markdown, RTF, ODT, XML, JSON</li> <li>Output Formats: PDF, HTML, DOCX, EPUB, TXT, Markdown, RTF, ODT, XML, JSON</li> <li>Image Extraction: Extract images from documents (PDF, DOCX)</li> <li>OCR Support: Extract text from scanned documents and images</li> </ul>"},{"location":"features/#bidirectional-conversion","title":"Bidirectional Conversion","text":"<ul> <li>Convert documents to structured data and back</li> <li>Template-based document generation</li> <li>Data extraction from existing documents</li> <li>Support for custom schemas and validation</li> </ul>"},{"location":"features/#advanced-features","title":"\ud83c\udfaf Advanced Features","text":""},{"location":"features/#document-processing","title":"Document Processing","text":"<ul> <li>Batch Processing: Process multiple documents in parallel</li> <li>Document Merging: Combine multiple documents into one</li> <li>Page Operations: Split, rotate, and reorder pages</li> <li>Watermarking: Add text or image watermarks</li> <li>Security: Password protection and permissions</li> </ul>"},{"location":"features/#template-system","title":"Template System","text":"<ul> <li>HTML + JSON Templates: Create reusable document templates</li> <li>Conditional Logic: Show/hide content based on data</li> <li>Loops &amp; Iteration: Generate repeating sections</li> <li>Variables &amp; Filters: Dynamic content manipulation</li> </ul>"},{"location":"features/#ai-powered-features","title":"AI-Powered Features","text":"<ul> <li>Smart Formatting: Automatic document cleanup and formatting</li> <li>Content Generation: AI-assisted content creation</li> <li>Data Extraction: Intelligent field recognition</li> <li>Language Detection: Automatic language identification</li> </ul>"},{"location":"features/#developer-tools","title":"\ud83d\udee0 Developer Tools","text":""},{"location":"features/#command-line-interface","title":"Command Line Interface","text":"<ul> <li>Simple commands for common operations</li> <li>Batch processing support</li> <li>Scriptable interface for automation</li> <li>Comprehensive help system</li> </ul>"},{"location":"features/#python-api","title":"Python API","text":"<ul> <li>Clean, object-oriented interface</li> <li>Asynchronous support</li> <li>Extensible architecture</li> <li>Type hints and documentation</li> </ul>"},{"location":"features/#web-interface-optional","title":"Web Interface (Optional)","text":"<ul> <li>Modern, responsive UI</li> <li>Drag and drop file upload</li> <li>Real-time preview</li> <li>User authentication and permissions</li> </ul>"},{"location":"features/#performance-scalability","title":"\ud83d\ude80 Performance &amp; Scalability","text":"<ul> <li>Multi-threaded Processing: Handle multiple documents simultaneously</li> <li>Memory Efficient: Process large documents with minimal memory usage</li> <li>Caching: Built-in caching for improved performance</li> <li>Progress Tracking: Real-time progress updates for long-running operations</li> </ul>"},{"location":"features/#security-features","title":"\ud83d\udd12 Security Features","text":"<ul> <li>Input Validation: Protect against malformed documents</li> <li>Sandboxing: Process untrusted documents safely</li> <li>TLS/SSL Support: Secure communication</li> <li>Access Control: Fine-grained permissions</li> </ul>"},{"location":"features/#integration-options","title":"\ud83d\udd04 Integration Options","text":""},{"location":"features/#apis-webhooks","title":"APIs &amp; Webhooks","text":"<ul> <li>REST API for remote processing</li> <li>Webhook support for asynchronous operations</li> <li>Callback notifications</li> </ul>"},{"location":"features/#cloud-storage","title":"Cloud Storage","text":"<ul> <li>AWS S3 integration</li> <li>Google Cloud Storage support</li> <li>Azure Blob Storage compatibility</li> <li>SFTP/FTPS support</li> </ul>"},{"location":"features/#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>GitHub Actions</li> <li>GitLab CI/CD</li> <li>Jenkins</li> <li>CircleCI</li> </ul>"},{"location":"features/#monitoring-logging","title":"\ud83d\udcca Monitoring &amp; Logging","text":"<ul> <li>Structured Logging: JSON-formatted logs</li> <li>Metrics: Prometheus metrics endpoint</li> <li>Health Checks: Built-in health monitoring</li> <li>Audit Logs: Track document processing history</li> </ul>"},{"location":"features/#internationalization","title":"\ud83c\udf10 Internationalization","text":"<ul> <li>Unicode Support: Full UTF-8 support</li> <li>Right-to-Left Languages: RTL text support</li> <li>Font Embedding: Include custom fonts</li> <li>Language Packs: Additional language support</li> </ul>"},{"location":"features/#extensibility","title":"\ud83d\udd0c Extensibility","text":""},{"location":"features/#plugins","title":"Plugins","text":"<ul> <li>Custom format support</li> <li>Third-party integrations</li> <li>Custom processors and filters</li> </ul>"},{"location":"features/#templates","title":"Templates","text":"<ul> <li>Create and share templates</li> <li>Template versioning</li> <li>Template validation</li> </ul>"},{"location":"features/#mobile-support","title":"\ud83d\udcf1 Mobile Support","text":"<ul> <li>Responsive document viewer</li> <li>Mobile-optimized web interface</li> <li>Progressive Web App (PWA) support</li> <li>Offline capabilities</li> </ul>"},{"location":"features/#documentation-support","title":"\ud83d\udcda Documentation &amp; Support","text":"<ul> <li>Comprehensive API documentation</li> <li>Interactive API explorer</li> <li>Example projects</li> <li>Community support forum</li> </ul>"},{"location":"installation/","title":"\ud83d\udce6 Installation Guide","text":""},{"location":"installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>Required Dependencies:</li> <li><code>poppler-utils</code> (for PDF processing)</li> <li><code>libreoffice</code> (for DOCX/ODT support)</li> <li><code>tesseract-ocr</code> (for OCR functionality)</li> <li><code>libreoffice-headless</code> (for server environments)</li> <li>Disk Space: ~500MB (more for large document processing)</li> <li>Memory: 2GB minimum (4GB recommended for large documents)</li> </ul>"},{"location":"installation/#installing-system-dependencies","title":"Installing System Dependencies","text":""},{"location":"installation/#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>sudo apt update\nsudo apt install -y \\\n    poppler-utils \\\n    libreoffice \\\n    tesseract-ocr \\\n    tesseract-ocr-eng \\\n    libreoffice-headless\n</code></pre>"},{"location":"installation/#macos-using-homebrew","title":"macOS (using Homebrew)","text":"<pre><code>brew install poppler tesseract tesseract-lang libreoffice\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Download and install Poppler for Windows</li> <li>Download and install Tesseract OCR</li> <li>Download and install LibreOffice</li> <li>Add all installation directories to your system PATH</li> </ol>"},{"location":"installation/#installing-redoc","title":"Installing Redoc","text":""},{"location":"installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<pre><code># Basic installation\npip install redoc\n\n# Install with all optional dependencies\npip install \"redoc[all]\"\n\n# Or install specific components\npip install \"redoc[cli]\"       # Command line interface\npip install \"redoc[server]\"     # Web server and API\npip install \"redoc[ai]\"         # AI features (requires Ollama)\npip install \"redoc[ocr]\"        # OCR capabilities (Tesseract)\npip install \"redoc[templates]\"  # Pre-built templates\n</code></pre>"},{"location":"installation/#using-docker-recommended-for-production","title":"Using Docker (Recommended for Production)","text":"<pre><code># Pull the latest image\ndocker pull text2doc/redoc:latest\n\n# Run a conversion\ndocker run -v $(pwd):/data text2doc/redoc convert input.pdf output.html\n\n# Start the web interface\ndocker run -p 8000:8000 -v $(pwd)/templates:/app/templates text2doc/redoc serve\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/text2doc/redoc.git\ncd redoc\n\n# Install in development mode with all dependencies\npip install -e \".[dev]\"\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests\npytest\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<pre><code># Check Redoc installation\nredoc --version\n\n# Verify basic functionality\nredoc convert --help\n\n# Run self-tests\nredoc test\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Redoc can be configured using environment variables or a configuration file:</p>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<pre><code>export REDOC_LOG_LEVEL=INFO\nexport REDOC_WORKERS=4\nexport REDOC_TEMP_DIR=/tmp/redoc\n</code></pre>"},{"location":"installation/#configuration-file","title":"Configuration File","text":"<p>Create <code>~/.config/redoc/config.yaml</code>: <pre><code>log_level: INFO\nworkers: 4\ntemp_dir: /tmp/redoc\ndefault_output_format: pdf\n\ntemplates:\n  search_paths:\n    - ~/.config/redoc/templates\n    - /usr/local/share/redoc/templates\n</code></pre></p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Missing Dependencies <pre><code># Check for missing system dependencies\nwhich pdftohtml tesseract libreoffice\n</code></pre></p> </li> <li> <p>Permission Errors <pre><code># Fix permission issues for temporary files\nchmod 777 /tmp/redoc  # Or your configured temp directory\n</code></pre></p> </li> <li> <p>Docker Issues <pre><code># Check if Docker is running\ndocker ps\n\n# Check container logs\ndocker logs &lt;container_id&gt;\n</code></pre></p> </li> <li> <p>OCR Problems</p> </li> <li>Ensure Tesseract language packs are installed</li> <li>Check image quality and resolution</li> <li>Try with <code>--preprocess image</code> option for better OCR results</li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Try the Quick Start Guide for basic usage</li> <li>Learn about Templates for document generation</li> <li>Explore AI Features for smart document processing</li> <li>Check the API Reference for programmatic usage</li> <li>Join our Community for support</li> </ul>"},{"location":"quick-start/","title":"\ud83d\ude80 Quick Start Guide","text":"<p>Welcome to Redoc, the universal document converter! This guide will help you get started with converting documents between various formats in just a few minutes.</p>"},{"location":"quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Basic familiarity with command line</li> <li>(Optional) Docker for containerized deployment</li> <li>(Optional) Tesseract OCR for image text extraction</li> </ul>"},{"location":"quick-start/#your-first-conversion","title":"Your First Conversion","text":""},{"location":"quick-start/#convert-a-document","title":"Convert a document","text":"<pre><code># Convert PDF to HTML\nredoc convert document.pdf document.html\n\n# Convert HTML to PDF\nredoc convert page.html output.pdf\n</code></pre>"},{"location":"quick-start/#interactive-mode","title":"Interactive Mode","text":"<pre><code># Start interactive shell\nredoc shell\n</code></pre>"},{"location":"quick-start/#basic-commands","title":"Basic Commands","text":""},{"location":"quick-start/#document-conversion","title":"Document Conversion","text":"<pre><code># Basic conversion\nredoc convert input.pdf output.html\n\n# Convert with a specific format\nredoc convert --from pdf --to html input.pdf output.html\n\n# Process multiple files\nredoc batch \"documents/*.pdf\" --format html --output-dir html_output\n</code></pre>"},{"location":"quick-start/#interactive-shell-commands","title":"Interactive Shell Commands","text":"<pre><code>redoc shell\n\n# In the shell:\n&gt; help                 # Show available commands\n&gt; convert input.pdf output.html  # Convert files\n&gt; batch \"*.pdf\" --format html   # Batch process files\n&gt; templates list      # List available templates\n&gt; exit                # Exit the shell\n</code></pre>"},{"location":"quick-start/#example-workflow-invoice-generation","title":"Example Workflow: Invoice Generation","text":"<ol> <li> <p>Prepare your data (data.json):    <pre><code>{\n  \"invoice\": {\n    \"number\": \"INV-2023-001\",\n    \"date\": \"2023-11-15\",\n    \"items\": [\n      {\"description\": \"Web Design\", \"quantity\": 10, \"price\": 100},\n      {\"description\": \"Hosting\", \"quantity\": 1, \"price\": 50}\n    ]\n  }\n}\n</code></pre></p> </li> <li> <p>Convert JSON to PDF using a template:    <pre><code>redoc convert --template invoice.html data.json invoice.pdf\n</code></pre></p> </li> <li> <p>Extract data from an existing document:    <pre><code>redoc extract --template invoice_schema.json scanned_invoice.pdf extracted_data.json\n</code></pre></p> </li> </ol>"},{"location":"quick-start/#advanced-examples","title":"Advanced Examples","text":""},{"location":"quick-start/#batch-processing","title":"Batch Processing","text":"<pre><code># Convert all PDFs in a directory to HTML\nredoc batch \"invoices/*.pdf\" --format html --output-dir html_output\n\n# Convert with a template\nredoc batch \"data/*.json\" --template invoice.html --output-dir pdf_invoices\n</code></pre>"},{"location":"quick-start/#using-docker","title":"Using Docker","text":"<pre><code># Run a conversion with Docker\ndocker run -v $(pwd):/data text2doc/redoc convert input.pdf output.html\n\n# Start the web interface\ndocker run -p 8000:8000 -v $(pwd)/templates:/app/templates text2doc/redoc serve\n</code></pre>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about templates for custom document generation</li> <li>Explore AI-powered features for smart document processing</li> <li>Check the API Reference for programmatic usage</li> <li>Review the installation guide for advanced setup</li> </ul>"},{"location":"quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Run <code>redoc --help</code> for command-line options</li> <li>Open an issue for bugs or feature requests</li> </ul>"},{"location":"templates/","title":"\ud83d\udcdd Templates","text":"<p>Redoc's template system allows you to create dynamic documents using HTML and JSON templates. This guide covers how to create and use templates effectively.</p>"},{"location":"templates/#template-basics","title":"Template Basics","text":""},{"location":"templates/#template-structure","title":"Template Structure","text":"<p>A Redoc template consists of: - An HTML file for layout and styling - Optional JSON schema for data validation - Support for variables, loops, and conditionals</p>"},{"location":"templates/#example-template","title":"Example Template","text":"<pre><code>&lt;!-- invoice.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Invoice {{ invoice.number }}&lt;/title&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; }\n        .total { font-weight: bold; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Invoice {{ invoice.number }}&lt;/h1&gt;\n    &lt;p&gt;Date: {{ invoice.date }}&lt;/p&gt;\n\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Description&lt;/th&gt;\n            &lt;th&gt;Quantity&lt;/th&gt;\n            &lt;th&gt;Price&lt;/th&gt;\n            &lt;th&gt;Total&lt;/th&gt;\n        &lt;/tr&gt;\n        {% for item in invoice.items %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ item.description }}&lt;/td&gt;\n            &lt;td&gt;{{ item.quantity }}&lt;/td&gt;\n            &lt;td&gt;${{ \"%.2f\"|format(item.price) }}&lt;/td&gt;\n            &lt;td&gt;${{ \"%.2f\"|format(item.quantity * item.price) }}&lt;/td&gt;\n        &lt;/tr&gt;\n        {% endfor %}\n        &lt;tr class=\"total\"&gt;\n            &lt;td colspan=\"3\"&gt;Total:&lt;/td&gt;\n            &lt;td&gt;${{ \"%.2f\"|format(invoice.total) }}&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"templates/#template-variables","title":"Template Variables","text":""},{"location":"templates/#basic-variables","title":"Basic Variables","text":"<pre><code>&lt;p&gt;Hello, {{ user.name }}!&lt;/p&gt;\n</code></pre>"},{"location":"templates/#loops","title":"Loops","text":"<pre><code>&lt;ul&gt;\n{% for item in items %}\n    &lt;li&gt;{{ item.name }} - ${{ item.price }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>"},{"location":"templates/#conditionals","title":"Conditionals","text":"<pre><code>{% if user.is_premium %}\n    &lt;p&gt;Welcome back, premium user!&lt;/p&gt;\n{% else %}\n    &lt;p&gt;Upgrade to premium for more features!&lt;/p&gt;\n{% endif %}\n</code></pre>"},{"location":"templates/#template-inheritance","title":"Template Inheritance","text":""},{"location":"templates/#base-template","title":"Base Template","text":"<pre><code>&lt;!-- base.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{% block title %}Default Title{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    {% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"templates/#child-template","title":"Child Template","text":"<pre><code>{% extends \"base.html\" %}\n\n{% block title %}My Page{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Welcome to my page!&lt;/h1&gt;\n{% endblock %}\n</code></pre>"},{"location":"templates/#best-practices","title":"Best Practices","text":"<ol> <li>Keep templates simple - Move complex logic to Python code</li> <li>Use includes - Break down large templates into smaller components</li> <li>Validate data - Always validate template data with JSON Schema</li> <li>Security - Escape user input to prevent XSS attacks</li> <li>Performance - Cache rendered templates when possible</li> </ol>"},{"location":"templates/#advanced-features","title":"Advanced Features","text":""},{"location":"templates/#custom-filters","title":"Custom Filters","text":"<pre><code>from redoc import Redoc\n\ndef format_currency(value):\n    return f\"${value:.2f}\"\n\nredoc = Redoc()\nredoc.jinja_env.filters['currency'] = format_currency\n</code></pre>"},{"location":"templates/#global-variables","title":"Global Variables","text":"<pre><code>redoc = Redoc()\nredoc.jinja_env.globals.update({\n    'now': datetime.datetime.now,\n    'version': '1.0.0'\n})\n</code></pre>"},{"location":"templates/#template-debugging","title":"Template Debugging","text":"<p>Enable debug mode to get better error messages: <pre><code>redoc = Redoc(debug=True)\n</code></pre></p> <p>Check template syntax: <pre><code>redoc check-template template.html\n</code></pre></p>"},{"location":"templates/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about AI-powered templates</li> <li>Explore the API Reference for advanced usage</li> <li>Check out example templates</li> </ul>"}]}